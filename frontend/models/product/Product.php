<?php

namespace frontend\models\product;

use backend\models\product\ProductCategory;
use backend\models\product\ProductLang;
use lav45\translate\TranslatedBehavior;
use lav45\translate\TranslatedTrait;
use Yii;

/**
 * This is the model class for table "product".
 *
 * @property int $id
 * @property float|null $rating Рейтинг
 * @property int|null $install_count Кол-во использований
 * @property string $logo Лого продукта
 * @property float|null $rate_average
 * @property float|null $rate_boon
 * @property float|null $rate_func
 * @property float|null $rate_support
 * @property float|null $rate_price
 * @property int|null $rate_count
 * @property int|null $admin_id
 * @property int|null $status
 */
class Product extends \yii\db\ActiveRecord
{
    const STATUS_ACTIVE = 10;
    const STATUS_DISABLED = 9;
    use TranslatedTrait;

    public $imageFile;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TranslatedBehavior::className(),
                'translateRelation' => 'productLangs', // Specify the name of the connection that will store transfers
                'languageAttribute' => 'lang_id', // post_lang field from the table that will store the target language
                'translateAttributes' => [
                    'name',
                    'short_descr',
                    'descr',
                ]
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'id'),
            'name' => Yii::t('product', 'name'),
            'translate' => Yii::t('product', 'translate'),
            'short_descr' => Yii::t('product', 'short_descr'),
            'descr' => Yii::t('product', 'descr'),
            'install_count' => Yii::t('app', 'Install Count'),
            'logo' => Yii::t('product', 'logo'),
            'rating' => Yii::t('product', 'rating'),
            'rate_average' => Yii::t('app', 'Rate Average'),
            'rate_boon' => Yii::t('app', 'Rate Boon'),
            'rate_func' => Yii::t('app', 'Rate Func'),
            'rate_support' => Yii::t('app', 'Rate Support'),
            'rate_price' => Yii::t('app', 'Rate Price'),
            'rate_count' => Yii::t('app', 'Rate Count'),
            'admin_id' => Yii::t('app', 'Admin ID'),
        ];
    }

    public function afterFind()
    {
        if(!$this->install_count)
            $this->install_count = 0;
        if(!$this->rate_count)
            $this->rate_count = 0;
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[Category]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(ProductCategory::className(), ['id' => 'category_id']);
    }
    /**
     * Gets query for [[Industries]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getIndustries()
    {
        return $this->hasMany(Industry::className(), ['id' => 'industry_id'])->viaTable('products_industries', ['product_id' => 'id']);
    }

    /**
     * Gets query for [[Integrators]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getIntegrators()
    {
        return $this->hasMany(Integrator::className(), ['id' => 'integrator_id'])->viaTable('integrators_products', ['product_id' => 'id']);
    }

    /**
     * Gets query for [[IntegratorsProducts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getIntegratorsProducts()
    {
        return $this->hasMany(IntegratorsProducts::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductCompatibilities]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductCompatibilities()
    {
        return $this->hasMany(ProductCompatibility::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductLangs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductLangs()
    {
        return $this->hasMany(ProductLang::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductTarifs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductTarifs()
    {
        return $this->hasMany(ProductTarif::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductsCategories]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductsCategories()
    {
        return $this->hasMany(ProductsCategories::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductsIndustries]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductsIndustries()
    {
        return $this->hasMany(ProductsIndustries::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductsProps]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductsProps()
    {
        return $this->hasMany(ProductsProps::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[ProductsRegions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProductsRegions()
    {
        return $this->hasMany(ProductsRegions::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[PropsQuestions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPropsQuestions()
    {
        return $this->hasMany(PropsQuestions::className(), ['product_id' => 'id']);
    }

    /**
     * Gets query for [[Regions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRegions()
    {
        return $this->hasMany(Region::className(), ['id' => 'region_id'])->viaTable('products_regions', ['product_id' => 'id']);
    }
}
