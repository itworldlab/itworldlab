<?php

namespace backend\controllers\product;

use backend\models\product\ProductCategory;
use backend\models\product\ProductProp;
use backend\models\product\Prop;
use backend\models\product\PropImportForm;
use backend\models\product\PropSearch;
use backend\models\product\PropType;
use lav45\translate\models\Lang;
use Yii;
use yii\bootstrap4\Html;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * PropTypeController implements the CRUD actions for PropType model.
 */
class PropTypeController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if(Yii::$app->request->isAjax)
            $this->layout = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Product models.
     * @return mixed
     */
    public function actionIndex($category_id = 0)
    {
        $cat = null;
        if($category_id != 0)
            $cat = ProductCategory::findOne($category_id);

        $dataProvider = new ActiveDataProvider(['query'=>PropType::find()->where(['category_id'=>$category_id])]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'langList' => Lang::getList(),
            'cat' => $cat,
        ]);
    }

    public function actionImport($cat_id,$form = false){
        $cat = ProductCategory::findOne($cat_id);
        if(empty($cat) && isset($_GET['scat_id'])){
            $cat = ProductCategory::findOne(Yii::$app->request->get("scat_id"));
        }

        if($form){
            $model = new PropImportForm();

            if($model->load(Yii::$app->request->post())){
                $errors = [];
                foreach($model->props as $id=>$val){
//                    echo $id."__".$val."<br/>";
                    if($val == 1){
                        $prop_type = PropType::findOne($id);
                        $props = Prop::find()->where(['prop_type_id'=>$prop_type->id])->all();
                        $prop_t = new PropType();
                        $prop_t->name = $prop_type->name;
                        $prop_t->type = $prop_type->type;
                        $prop_t->category_id = $cat->id;
                        if($prop_t->save()){
                            foreach($props as $prop){
                                $pro_t = new Prop();
                                $pro_t->prop_type_id = $prop_t->id;
                                $pro_t->name = $prop->name;
                                $pro_t->status = $prop->status;
                                $pro_t->icon = $prop->icon;
                                if(!$pro_t->save())
                                    $errors[] = $pro_t->errors;
                            }
                        }else{
                            $errors[] = $prop_t->errors;
                        }
                    }

                }
                if(!empty($errors))
                    Yii::$app->session->setFlash("error",Html::errorSummary($errors));
                else
                    return $this->redirect(['/product/prop-type/index','category_id'=>$model->cat_id]);
            }

            $props = PropType::find();
            if($cat_id != 0){
               $props = $props->where(['category_id'=>$cat_id]);
            }
            $props = $props->all();
            return $this->render("import-form",[
                'props' => $props,
                'cat' => $cat,
                'model' => $model
            ]);
        }
        if(empty($cat))
            throw new NotFoundHttpException("Категория не найдена");

        return $this->render("import",[
            'cat' => $cat,
        ]);
    }

    /**
     * Displays a single Product model.
     * @param int $id ID
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        $searchModel = new PropSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('view', [
            'model' => $this->findModel($id),
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Creates a new Product model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($category_id = 0)
    {
        $model = new PropType();
        if($category_id > 0){
            $model->category_id = $category_id;
        }

        if ($model->load(Yii::$app->request->post())) {
            if($model->save()){
                Yii::$app->session->setFlash("success","Товар добавлен");
                return $this->redirect('index');
            }else{
                Yii::$app->session->setFlash("error",Html::errorSummary($model));
            }

        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Product model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param int $id ID
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);


        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect('index');
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Product model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param int $id ID
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Product model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param int $id ID
     * @return PropType the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = PropType::findOne(['id' => $id])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
