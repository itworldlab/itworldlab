<?php

namespace backend\models\company;

use backend\models\product\Product;
use backend\models\Region;
use lav45\translate\TranslatedBehavior;
use lav45\translate\TranslatedTrait;
use Yii;

/**
 * This is the model class for table "company".
 *
 * @property int $id
 * @property int|null $projects_count
 * @property int|null $average_rate
 * @property int|null $open_date
 * @property int|null $status
 * @property string|null $logo_image
 * @property string|null $wall_image
 * @property int $category_id
 * @property int $region_id
 *
 * @property CompaniesCategories[] $companiesCategories
 * @property CompaniesProducts[] $companiesProducts
 * @property CompaniesRegions[] $companiesRegions
 * @property CompanyCategory[] $companyCategories
 * @property CompanyCategory $companyCategory
 * @property CompanyContacts[] $companyContacts
 * @property CompanyLang[] $companyLangs
 * @property Region $region
 * @property Region[] $regions
 */
class Company extends \yii\db\ActiveRecord
{
    use TranslatedTrait;
    public $imageFile;
    public $cats;
    public $regs;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'company';
    }
    public static function GetAll(){
        return Company::find()->all();
    }

    public function upload()
    {
        if(!$this->imageFile)
            return true;
        if ($this->validate()) {
            $file = Yii::$app->security->generateRandomString(10).".".$this->imageFile->extension;
//            $this->imageFile->saveAs('uploads/' .$file);
            $this->imageFile->saveAs(Yii::getAlias("@frontend").'/web/uploads/' .$file);
            $this->imageFile = null;
            $this->logo_image = $file;
            return true;
        } else {
            $this->addError("imageFile","Ошибка картинки");
            return false;
        }
    }

    public function afterFind()
    {
        foreach(CompaniesCategories::find()->where(['company_id'=>$this->id])->all() as $item){
            $this->cats[] = $item->company_category_id;
        }
        foreach(CompaniesRegions::find()->where(['company_id'=>$this->id])->all() as $item){
            $this->regs[] = $item->region_id;
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function getProducts(){
        return $this->hasMany(CompaniesProducts::className(), ['company_id' => 'id']);
    }

    /**
     * @return bool
     * @throws \yii\db\Exception
     */
    public function SetCats(){
//        print_r($this->cats);exit();
        $result = true;
        if(!empty($this->cats)){
            \Yii::$app->db->createCommand("DELETE FROM companies_categories WHERE company_id=".intval($this->id))->execute();
            foreach($this->cats as $cat_id){
                $company_cat = new CompaniesCategories();
                $company_cat->company_id = $this->id;
                $company_cat->company_category_id = $cat_id;
                if(!$company_cat->save()){
                    $this->addErrors($company_cat->errors);
                    $result = false;
                }
            }
        }
        return $result;
    }

    /**
     * @return bool
     * @throws \yii\db\Exception
     */
    public function SetRegions(){
//        print_r($this->cats);exit();
        $result = true;
        if(!empty($this->regs)){
            \Yii::$app->db->createCommand("DELETE FROM companies_regions WHERE company_id=".intval($this->id))->execute();
            foreach($this->regs as $cat_id){
                $company_cat = new CompaniesRegions();
                $company_cat->company_id = $this->id;
                $company_cat->region_id = $cat_id;
                if(!$company_cat->save()){
                    $this->addErrors($company_cat->errors);
                    $result = false;
                }
            }
        }
        return $result;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['projects_count', 'average_rate', 'open_date', 'status', 'category_id', 'region_id'], 'integer'],
            [['category_id', 'region_id'], 'required'],
            [['logo_image', 'wall_image','name','short_descr','addr'], 'string', 'max' => 100],
            [['descr'],'string'],
            [['cats','regs'],'safe'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'svg,png,jpg,jpeg'],
            [['category_id'], 'exist', 'skipOnError' => false, 'targetClass' => CompanyCategory::className(), 'targetAttribute' => ['category_id' => 'id']],
            [['region_id'], 'exist', 'skipOnError' => false, 'targetClass' => Region::className(), 'targetAttribute' => ['region_id' => 'id']],
        ];
    }

    public function behaviors()
    {
        return [
            [
                'class' => TranslatedBehavior::className(),
                'translateRelation' => 'companyLangs', // Specify the name of the connection that will store transfers
                'languageAttribute' => 'lang_id', // post_lang field from the table that will store the target language
                'translateAttributes' => [
                    'name',
                    'short_descr',
                    'descr',
                    'addr',
                ]
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'imageFile' => 'Лого',
            'name' => 'Название компании',
            'short_descr' => 'Короткое описание',
            'descr' => 'Описание',
            'addr' => 'Адрес',
            'cats' => 'Дополнительные категории',
            'regs' => 'Дополнительные регионы',
            'projects_count' => 'Кол-во проектов',
            'average_rate' => 'Средний бал',
            'open_date' => 'Работает с',
            'status' => 'Статус',
            'logo_image' => 'Лого',
            'wall_image' => 'Картинка фона',
            'category_id' => 'Категория',
            'region_id' => 'Регион',
            'region.name' => 'Регион',
        ];
    }

    public function getCategory(){
        return $this->hasOne(CompanyCategory::className(),['id'=>'category_id']);
    }

    /**
     * Gets query for [[CompaniesCategories]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompaniesCategories()
    {
        return $this->hasMany(CompaniesCategories::className(), ['company_id' => 'id']);
    }

    /**
     * Gets query for [[CompaniesProducts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompaniesProducts()
    {
        return $this->hasMany(CompaniesProducts::className(), ['company_id' => 'id']);
    }

    /**
     * Gets query for [[CompaniesRegions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompaniesRegions()
    {
        return $this->hasMany(CompaniesRegions::className(), ['company_id' => 'id']);
    }

    /**
     * Gets query for [[CompanyCategories]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyCategories()
    {
        return $this->hasMany(CompanyCategory::className(), ['id' => 'category_id'])->viaTable('companies_categories', ['company_id' => 'id']);
    }

    /**
     * Gets query for [[CompanyCategory]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyCategory()
    {
        return $this->hasOne(CompanyCategory::className(), ['id' => 'category_id']);
    }

    /**
     * Gets query for [[CompanyContacts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyContacts()
    {
        return $this->hasMany(CompanyContacts::className(), ['company_id' => 'id']);
    }

    /**
     * Gets query for [[CompanyLangs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCompanyLangs()
    {
        return $this->hasMany(CompanyLang::className(), ['company_id' => 'id']);
    }

    /**
     * Gets query for [[Region]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRegion()
    {
        return $this->hasOne(Region::className(), ['id' => 'region_id']);
    }

    /**
     * Gets query for [[Regions]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRegions()
    {
        return $this->hasMany(Region::className(), ['id' => 'region_id'])->viaTable('companies_regions', ['company_id' => 'id']);
    }
}
